{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jgoffin.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "Clustering Exploration . import numpy as np import matplotlib.pyplot as plt from PIL import Image import pandas as pd from sklearn.ensemble import RandomForestClassifier from sklearn.cluster import SpectralClustering from sklearn.metrics import accuracy_score . KMeans . %run kmeans . Simple Example With Two Distinct Clusters . Vanilla kmeans works by randomly initializing a specified (k) number of centroids and then Assigning data points to their closest centroids | Recomputing the centroids as the mean of the points belonging to each cluster | Repeat the process until centroids don&#39;t change by some specified tolerance | | Here we show that regular kmeans is able to find the centers of two synthetically created clusters and assign points correctly | . Create two clusters normally distributed about (0,0) and (4,4) respectively in two dimensions . group1 = np.random.normal(loc=[0,0], scale=[1,1], size=(100,2)) group2 = np.random.normal(loc=[4,4], scale=[1,1], size=(100,2)) . X = np.vstack([group1,group2]) . plt.scatter(X[:,0],X[:,1]) plt.show() . The results of our kmeans algorithm (setting number of clusters=2) shows that it easily finds the centers of each group . centroids, cluster_indexes = kmeans(X, k=2) . Reached iteration 1, change in centroid distance: 3.3505724442162523 Reached iteration 2, change in centroid distance: 1.4273449005389718 Reached iteration 3, change in centroid distance: 0.17641866464256745 Reached iteration 4, change in centroid distance: 0.0 . ax1 = plt.scatter(X[:,0], X[:,1], alpha=0.5, c=cluster_indexes) ax2 = plt.scatter(centroids[:,0], centroids[:,1], marker=&#39;x&#39;, s=200, c=&#39;r&#39;, linewidths=8) plt.show() . Confusing KMeans . What if the clusters have different variances, or the wrong initialization centroids are chosen? Here we show that it can often produce different results with each iteration of running kmeans | . group1 = np.random.normal(loc=[0,0], scale=[0.1,0.1], size=(100,2)) group2 = np.random.normal(loc=[0,2], scale=[0.5,0.5], size=(100,2)) group3 = np.random.normal(loc=(3,3), scale=[1,1], size=(200,2)) . X = np.vstack([group1,group2,group3]) . plt.scatter(X[:,0],X[:,1]) plt.show() . The above plot was created with three distinct clusters, some with higher variance. We see that depending on the random initialization of our clusters, kmeans can produce very different results, as shown in the two plots below . centroids_run1, cluster_indexes_run1 = kmeans(X, k=3) #cluster_colors_run1 = cluster_colors(cluster_indexes_run1) . Reached iteration 1, change in centroid distance: 1.8643889864293264 Reached iteration 2, change in centroid distance: 0.3524654143926682 Reached iteration 3, change in centroid distance: 0.11720397544645224 Reached iteration 4, change in centroid distance: 0.029681353220982195 Reached iteration 5, change in centroid distance: 0.029759121303777496 Reached iteration 6, change in centroid distance: 0.01197546552897972 Reached iteration 7, change in centroid distance: 0.0 . centroids_run2, cluster_indexes_run2 = kmeans(X, k=3) #cluster_colors_run2 = cluster_colors(cluster_indexes_run2) . Reached iteration 1, change in centroid distance: 1.4914543193119743 Reached iteration 2, change in centroid distance: 0.4235311048427985 Reached iteration 3, change in centroid distance: 0.20370290906325345 Reached iteration 4, change in centroid distance: 0.07409020674570002 Reached iteration 5, change in centroid distance: 0.07506223357832714 Reached iteration 6, change in centroid distance: 0.031397399118610024 Reached iteration 7, change in centroid distance: 0.0 . plt.figure(figsize=(12,5)) ax1 = plt.subplot(121) ax1.scatter(X[:,0], X[:,1], alpha=0.5, c=cluster_indexes_run1) ax1.scatter(centroids_run1[:,0], centroids_run1[:,1], marker=&#39;x&#39;, s=200, c=&#39;r&#39;, linewidths=8) ax2 = plt.subplot(122) ax2.scatter(X[:,0], X[:,1], alpha=0.5, c=cluster_indexes_run2) ax2.scatter(centroids_run2[:,0], centroids_run2[:,1], marker=&#39;x&#39;, s=200, c=&#39;r&#39;, linewidths=8) plt.show() . Fixing Intialization Issues with KMeans ++ . KMeans++ is an improved version of KMeans that address initialization issues by finding &quot;smart&quot; initial centroids before proceeding with the regular KMeans algorithm | The first centroid is still chosen randomly, but every subsequent inital centroid (the remaining k-1 choices) is picked as the data point whose minimum distance to the existing centroids is maximized | . kmeans_output, initial_centroids = kmeans_plus_plus(X, k=3) . Reached iteration 1, change in centroid distance: 0.7330861908899363 Reached iteration 2, change in centroid distance: 0.43246590512059496 Reached iteration 3, change in centroid distance: 0.12390889612354952 Reached iteration 4, change in centroid distance: 0.04971838473547824 Reached iteration 5, change in centroid distance: 0.05548387996103093 Reached iteration 6, change in centroid distance: 0.06834049993756969 Reached iteration 7, change in centroid distance: 0.01694963731798282 Reached iteration 8, change in centroid distance: 0.0 . centroids, cluster_indexes = kmeans_output . plt.figure(figsize=(12,6)) plt.scatter(X[:,0], X[:,1], alpha=0.3, c=cluster_indexes, label=&quot;_nolegend_&quot;) plt.scatter(centroids[:,0], centroids[:,1], marker=&#39;x&#39;, s=200, c=&#39;red&#39;, linewidths=8) plt.scatter(initial_centroids[:,0], initial_centroids[:,1], marker=&#39;x&#39;, s=200, c=&#39;black&#39;, linewidths=8) plt.legend([&#39;Final Centroids&#39;,&#39;Initial Centroids&#39;]) plt.show() . Image Compression . Thinking about each pixel in an image as a data point (1-D vector for greyscale, 3-D vector for RGB) we can use kmeans to to reduce the possible values taken on by pixels to just those defined by k centroids (a form of image compression) | . Greyscale Image . dog_original = Image.open(&#39;dog.png&#39;) . dog_original . h,w = dog_original.height, dog_original.width . Greyscale images only have one dimension so we convert our image into a single column array . X = np.array(dog_original).reshape(-1,1) . We are going to find four clusters in our image, thereby reduce our greyscale image from representation in 0-255 space, to only four values! . output, initial_centroids = kmeans_plus_plus(X, k=4) centroids, cluster_indexes = output . Reached iteration 1, change in centroid distance: 126.35849992914612 Reached iteration 2, change in centroid distance: 76.56488118466402 Reached iteration 3, change in centroid distance: 25.711760989330614 Reached iteration 4, change in centroid distance: 11.931228700605322 Reached iteration 5, change in centroid distance: 7.4442507387158265 Reached iteration 6, change in centroid distance: 4.455448127880959 Reached iteration 7, change in centroid distance: 2.392603918568763 Reached iteration 8, change in centroid distance: 1.9527459716215032 Reached iteration 9, change in centroid distance: 0.9460189484866245 Reached iteration 10, change in centroid distance: 0.0 . Centroids can become floating point representations, but images require integer values . centroids = centroids.astype(np.uint8) . centroids . array([[ 89], [ 26], [150], [199]], dtype=uint8) . Map every element of X to the centroid value of the cluster it belongs to . centroid_map = {i:centroid for i,centroid in enumerate(centroids)} . new_X = np.array([centroid_map[cluster_index] for cluster_index in cluster_indexes]) new_X = new_X.reshape((h,w)) dog_new = Image.fromarray(new_X, &#39;L&#39;) . The result? Art! . dog_new . Color Image (Painting) . vangogh = Image.open(&#39;starry_night.jpg&#39;) . vangogh . h,w = vangogh.height, vangogh.width . X = np.array(vangogh).reshape(-1,3) . output, initial_centroids = kmeans_plus_plus(X, k=5, tolerance=2) . Reached iteration 1, change in centroid distance: 134.5048355985506 Reached iteration 2, change in centroid distance: 111.24990407662187 Reached iteration 3, change in centroid distance: 33.738943776276976 Reached iteration 4, change in centroid distance: 18.790316654301314 Reached iteration 5, change in centroid distance: 13.767596333156334 Reached iteration 6, change in centroid distance: 12.097711540874533 Reached iteration 7, change in centroid distance: 12.855906927336271 Reached iteration 8, change in centroid distance: 13.901831795354852 Reached iteration 9, change in centroid distance: 11.237143899210164 Reached iteration 10, change in centroid distance: 7.404728277490192 Reached iteration 11, change in centroid distance: 4.649597291040328 Reached iteration 12, change in centroid distance: 3.089866683552309 Reached iteration 13, change in centroid distance: 2.0610401360143897 Reached iteration 14, change in centroid distance: 1.5414807913753985 . centroids, cluster_indexes = output . centroids = centroids.astype(np.uint8) . centroid_map = {i:centroid for i,centroid in enumerate(centroids)} . new_X = np.array([centroid_map[cluster_index] for cluster_index in cluster_indexes]) new_X = new_X.reshape((h,w,3)) vangogh_new = Image.fromarray(new_X) . vangogh_new . Color Image (Photo) . landscape = Image.open(&#39;landscape.jpg&#39;) . landscape . h,w = landscape.height, landscape.width . X = np.array(landscape).reshape(-1,3) . output, initial_centroids = kmeans_plus_plus(X, k=8, tolerance=5) . Reached iteration 1, change in centroid distance: 319.1482674094971 Reached iteration 2, change in centroid distance: 192.89972690893404 Reached iteration 3, change in centroid distance: 48.682545639459505 Reached iteration 4, change in centroid distance: 23.507642332026847 Reached iteration 5, change in centroid distance: 16.716557977556675 Reached iteration 6, change in centroid distance: 19.44171413221326 Reached iteration 7, change in centroid distance: 13.27593915150877 Reached iteration 8, change in centroid distance: 7.035858784600635 Reached iteration 9, change in centroid distance: 3.921299643737343 . centroids, cluster_indexes = output . centroids = centroids.astype(np.uint8) . centroid_map = {i:centroid for i,centroid in enumerate(centroids)} . new_X = np.array([centroid_map[cluster_index] for cluster_index in cluster_indexes]) new_X = new_X.reshape((h,w,3)) landscape_new = Image.fromarray(new_X) . landscape_new . Spectral Clustering . Goal: train a random forest on an unlabeled version of a breast-cancer dataset. Use the results to to compute a similarity/proximity matrix between data points that can then be fed into a spectral clustering algorithm. Compare the k=2 cluster results to the actual labels (Malignant or Benign) | . cancer_data = pd.read_csv(&#39;cancer_data.csv&#39;) cancer_data[&#39;label&#39;] = cancer_data[&#39;diagnosis&#39;].map({&#39;M&#39;:1, &#39;B&#39;:0}) . Since this is an unsupervised problem, we don&#39;t have labels. We train our random forest then is by creating a duplicate dataset where each column has been shuffled. We concatenate these two datasets and task the random forest to predict label = original or shuffled dataset . original = cancer_data.drop(columns=[&#39;id&#39;,&#39;diagnosis&#39;,&#39;Unnamed: 32&#39;,&#39;label&#39;]) shuffled = original.copy() . for col in shuffled.columns: np.random.shuffle(shuffled[col].values) . original[&#39;target&#39;] = 1 shuffled[&#39;target&#39;] = 2 combined_data = pd.concat([original, shuffled], axis=0) . X = combined_data.drop(columns=[&#39;target&#39;]) y = combined_data[&#39;target&#39;] rf = RandomForestClassifier(n_estimators=100, min_samples_leaf=3, max_features=0.8) rf.fit(X, y) . RandomForestClassifier(bootstrap=True, class_weight=None, criterion=&#39;gini&#39;, max_depth=None, max_features=0.8, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=3, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None, oob_score=False, random_state=None, verbose=0, warm_start=False) . leaf_samples is a function that returns which data points of our original dataset end up in which leaf node (repeated for every tree in the random forest) . leafs = leaf_samples(rf, original.drop(columns=[&#39;target&#39;])) . Constructing the similarity matrix is then just a matter of incrementing the i,j entries in the matrix if they ever appeared in a leaf node together . similarity_matrix = np.zeros((len(original), len(original))) for arr in leafs: for i in range(len(arr)): for j in range(len(arr)): similarity_matrix[arr[i], arr[j]] +=1 . cluster = SpectralClustering(n_clusters=2, affinity=&#39;precomputed&#39;) cluster_preds = cluster.fit_predict(similarity_matrix) . Creating two clusters (correspoding hopefully to Malignant and Benign) via Spectral Clustering turns out to actually achieve 90% accuracy when compared with the true labels . accuracy_score(cancer_data[&#39;label&#39;], cluster_preds) . 0.9033391915641477 . confusion_matrix(cancer_data[&#39;label&#39;], cluster_preds) . array([[319, 38], [ 17, 195]]) . We can also see how our regular kmeans does at creating two clusters corresponding to our true lables. Accuracy is less than spectral clustering, but still achieves 85% . original_array = np.array(original.drop(columns=[&#39;target&#39;])) centroids, cluster_indexes = kmeans(original_array, k=2) . Reached iteration 1, change in centroid distance: 885.6527546785173 Reached iteration 2, change in centroid distance: 485.8151775277754 Reached iteration 3, change in centroid distance: 232.57212063478596 Reached iteration 4, change in centroid distance: 103.22396761353083 Reached iteration 5, change in centroid distance: 53.867039483219166 Reached iteration 6, change in centroid distance: 33.97836002054128 Reached iteration 7, change in centroid distance: 21.90542123279184 Reached iteration 8, change in centroid distance: 10.76452976693183 Reached iteration 9, change in centroid distance: 5.388804859613899 Reached iteration 10, change in centroid distance: 0.0 . accuracy_score(cancer_data[&#39;label&#39;], cluster_indexes) . 0.8541300527240774 .",
            "url": "https://jgoffin.github.io/blog/2020/02/16/kmeans.html",
            "relUrl": "/2020/02/16/kmeans.html",
            "date": " • Feb 16, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jgoffin.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jgoffin.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jgoffin.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}